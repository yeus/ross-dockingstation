# creating docker image for ros2
# with some basic applications

# Image base
FROM gitlab-registry.tubit.tu-berlin.de/ross-lead-engineers/ross-docking-station/ros2:sourcerepos

MAINTAINER Thomas Meschede & Juan Maria Haces Crespo

# Get the first applications for internet, mysql, etcetera.
RUN apt update && apt install -y \
    iputils-ping openssh-server net-tools nmap vim byobu python3-numpy \
    ipython3 libeigen3-dev \
    python3-pandas python3-mysqldb \
    graphviz graphviz-dev doxygen doxypy inkscape doxygen-gui \
    sudo nano \
    pyqt5-dev python3-pyqt5 qt5-default libsqlite3-dev libtinyxml2-dev \
    && rm -rf /var/lib/apt/lists/*
    
    
# Get space engineering applications as sgp4/skyfield
#RUN pip3 install --upgrade pip
RUN pip3 install sgp4 \
    skyfield \
    && rm -rf /var/lib/apt/lists/*

# create user "ross" add to sudo group and change password to "ross"
RUN useradd -ms /bin/bash ross && echo "ross:ross" | \
        chpasswd && adduser ross sudo && \
        adduser ross root && \
        echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
        
# Allow to all users to read, write and execute the files in ros2_ws
###RUN chmod a+rwx /ros2_source_entrypoint.sh
###RUN chmod -R a+rwx /root  #is this OK, security-wise?
#RUN chown -R ross:ross /root
#RUN chmod -R a+rwx /root
#RUN chmod -R a+rwx /root/ros2_ws
###RUN sudo chmod -R a+rwx /root/ros2_ws/  #is this OK, security-wise?
###CMD chown -R 1000:1000 /root/ros2_ws/          # I do not understand why there are 2 CMDs in the file. The last one is the only which will be executed.
###RUN mv /root/ros2-ws /home/ross/ros2_ws && 
#RUN chown -R 1000:1000 /root/ros2_ws
RUN chown -R ross:ross /root && chmod -R a+rx /root/ros2_ws

#RUN chown -R 1000:1000 /opt/ros/
    
#use "ross" user from here
USER ross 

#RUN echo 'echo "starting ross dev environment" \nsource /home/ross/ros2-ws/local_setup.bash' >> ~/.bashrc 
#RUN echo 'exec "$@"' >> ~/.bashrc 

#USER root -R 1000:1000 /home/ross
# RUN chmod -fR a+rwx /home/ross

#setting ros2 environment variables
#adding a script "ros2_entrypoint.sh" to the directory and as entrypoint

#ENV ROSPATH /opt/ros/$ROS_DISTRO
ENV ROS2_WS /root/ros2_ws

#This command generates the entrypoint script and, also, give rights to all users
#RUN echo '#!/bin/bash \nset -e \
#    \nsource $ROS2_WS/install/setup.bash \ 
#    \nsource $ROS2_WS/install/ros2cli/share/ros2cli/environment/ros2-argcomplete.bash \
#    \nexec "$@"' >> $ROS2_WS/ros2_entrypoint.sh \
#    && chmod a+rwx $ROS2_WS/ros2_entrypoint.sh
    
#This command generates the entrypoint script and, also, give rights to all users
RUN echo '#!/bin/bash \nset -e \
    \nsource $ROS2_WS/install/setup.bash \ 
    \nexec "$@"' >> $ROS2_WS/ros2_entrypoint.sh \
    && chmod a+rwx $ROS2_WS/ros2_entrypoint.sh
    
    
#setting ross environment variables
#RUN echo 'echo "starting ross environment" \nsource $ROS2_WS/install/local_setup.bash' >> ~/.bashrc     

    
WORKDIR /home/ross

# RUN byobu-enable

#USER root

#ENTRYPOINT ["/root/ros2_ws/ros2_entrypoint.sh"]
#ENTRYPOINT ["/ros2_entrypoint.sh"]
#ENTRYPOINT /bin/bash
#ENTRYPOINT su ross -c "/bin/bash"
#CMD su ross -c "/home/ross/ros2_entrypoint.sh"
CMD ["/bin/bash"]       #This follows the definition of the entrypoint [above layer]

#http://www.yegor256.com/2014/08/29/docker-non-root.html
